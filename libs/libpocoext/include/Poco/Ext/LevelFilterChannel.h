// 
// LevelFilterChannel.h
// 
// $Id$
// 
// Library: Ext
// Package: Logging
// Module:  LevelFilterChannel
// 
// Definition of the ISO_8859_5Encoding class.
// 
// Copyright (c) 2004-2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
// 
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef Foundation_LevelFilterChannel_INCLUDED
#define Foundation_LevelFilterChannel_INCLUDED


#include "Poco/Foundation.h"
#include "Poco/Channel.h"
#include "Poco/Mutex.h"
#include "Poco/Message.h"
#include <vector>


namespace Poco {


class Foundation_API LevelFilterChannel: public Channel
	/// This channel sends messages only higher then specified level
{
public:
	LevelFilterChannel();

	void log(const Message& msg);
		/// Sends the given Message to all
		/// attaches channels. 

	void setProperty(const std::string& name, const std::string& value);
		/// Sets or changes a configuration property.
		///
		/// Only the "level" property is supported, which allows setting desired level

	void setChannel(Channel* pChannel);
		/// Sets the destination channel to which the formatted 
		/// messages are passed on.

	Channel* getChannel() const;
		/// Returns the channel to which the formatted
		/// messages are passed on.

	void open();
		/// Opens the attached channel.
		
	void close();
		/// Closes the attached channel.
		
	void setLevel(Message::Priority);
		/// Sets the Logger's log level.
	void setLevel(const std::string& value);
		/// Sets the Logger's log level using a symbolic value.
	Message::Priority getLevel() const;
		/// Returns the Logger's log level.

protected:
	~LevelFilterChannel();

private:
	Channel*          _channel;
	Message::Priority _priority;
};


} // namespace Poco


#endif // Foundation_LevelFilterChannel_INCLUDED
